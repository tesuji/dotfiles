$include /etc/inputrc

# Editing mode (emacs or vi) for all programs using `readline`, including `bash`.
set editing-mode vi
# Display which mode is currently active in Vi-style editing: command and insert
set show-mode-in-prompt on

set bell-style none
# Make Tab auto-complete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when auto-completing symlinks to directories
set mark-symlinked-directories on

# Do not auto-complete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all auto-complete results at once
set page-completions off

# If there are more than 42 possible completions for a word, ask to show them all
set completion-query-items 42

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when auto-completing by also looking at the text after
# the cursor. (This is supported by the `readline` used by Bash 4.)
set skip-completed-text on

$if mode=vi
    set keymap vi-command
    # these are for vi-command mode
    "\e[A": history-search-backward
    "\e[B": history-search-forward
    j: history-search-forward
    k: history-search-backward
    set keymap vi-insert
    # these are for vi-insert mode
    "\e[A": history-search-backward
    "\e[B": history-search-forward
$else
    # Use the text that has already been typed as the prefix for searching through
    # commands (i.e. more intelligent Up/Down behavior)
    "\e[A": history-search-backward
    "\e[B": history-search-forward

    # Use Alt/Meta + Delete to delete the preceding word
    "\e[3;3~": kill-word
$endif

"\C-L": clear-screen
"\C-K": kill-line
"\C-U": backward-kill-line

# Tab: menu-complete
#"\e[Z": "\e-1\C-i"
"\e[5C": forward-word
"\e[5D": backward-word
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

"\C-a": beginning-of-line
"\C-e": end-of-line
"\e[H": beginning-of-line
"\e[F": end-of-line

# if using putty, change xterm to xterm-256color in connection -> data
#$if term=putty
"\e[1~": beginning-of-line
"\e[4~": end-of-line

"\e[7~": beginning-of-line
"\e[8~": end-of-line

"\eOH": beginning-of-line
"\eOF": end-of-line
#$endif

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off
